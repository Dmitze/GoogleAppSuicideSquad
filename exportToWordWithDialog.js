// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
const DEFAULT_DOC_NAME = "–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –ª–∏—Å—Ç";
const DEFAULT_WORD_FILE_NAME = "ExportedSheet.docx";

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
function getBossesList() {
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–î–æ–≤—ñ–¥–Ω–∏–∫–∏');
  if (!sheet) return [];
  let data = sheet.getRange('A2:A').getValues().flat().filter(String);
  return data;
}

// === –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞ –∏ –¥—ñ–∞–ø–∞–∑–æ–Ω–∞ ===
function showExportToWordDialog() {
  const sheets = SpreadsheetApp.getActiveSpreadsheet().getSheets();
  const sheetOptions = sheets.map(s => `<option value="${s.getName()}">${s.getName()}</option>`).join("");
  const html = HtmlService.createHtmlOutput(`
    <div style="font-family:sans-serif;">
      <h3>–ï–∫—Å–ø–æ—Ä—Ç –¥–æ Word / PDF / Excel</h3>
      <label>–õ–∏—Å—Ç:</label>
      <select id="sheetName">${sheetOptions}</select>
      <button onclick="updateSheets()" style="margin-left:10px;">üîÑ –û–Ω–æ–≤–∏—Ç–∏</button>
      <br><br>
      <label>–î—ñ–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, A1:K27):</label>
      <input type="text" id="range" value="A1:K27" style="width:120px;">
      <br><br>
      <label>–Ü–º'—è —Ñ–∞–π–ª—É (–±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è):</label>
      <input type="text" id="fileName" value="ExportedSheet" style="width:180px;">
      <br><br>
      <button onclick="exportNow('docx')" style="font-size:1.1em;">üìÑ Word</button>
      <button onclick="exportNow('pdf')" style="font-size:1.1em;margin-left:10px;">üîΩ PDF</button>
      <button onclick="exportNow('xlsx')" style="font-size:1.1em;margin-left:10px;">üìä Excel</button>
      <div id="status" style="margin-top:15px;"></div>
      <script>
        function updateSheets() {
          google.script.run.withSuccessHandler(function(names){
            var sel = document.getElementById('sheetName');
            var curr = sel.value;
            sel.innerHTML = names.map(function(n){return '<option value="'+n+'">'+n+'</option>';}).join('');
            sel.value = curr || names[0];
          }).getSheetNames();
        }
        function exportNow(format) {
          const sheet = document.getElementById('sheetName').value;
          const range = document.getElementById('range').value;
          const fileName = document.getElementById('fileName').value || 'ExportedSheet';
          if (!sheet || !range || !fileName) {
            document.getElementById('status').innerHTML = '<b style="color:red;">‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!</b>';
            return;
          }
          document.getElementById('status').innerHTML = '<div style="width:100%;height:10px;background:#eee;border-radius:5px;overflow:hidden;"><div id="pb" style="height:10px;width:30%;background:linear-gradient(90deg,#4a90e2,#2ecc71,#f39c12,#e74c3c,#4a90e2);background-size:200% 100%;animation:progressmove 1s linear infinite;"></div></div><span>‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ...</span>';
          if (format === 'docx') {
            google.script.run
              .withSuccessHandler(url => {
                document.getElementById('status').innerHTML =
                  '<b>‚úÖ Word-—Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b><br><a href="'+url+'" target="_blank">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</a>';
              })
              .withFailureHandler(err => {
                document.getElementById('status').innerHTML =
                  '<b style="color:red;">‚ùå ' + (err.message || err) + '</b>';
              })
              .exportSheetRangeToWordCustom(sheet, range, fileName + ".docx");
          } else if (format === 'pdf') {
            google.script.run
              .withSuccessHandler(url => {
                document.getElementById('status').innerHTML =
                  '<b>‚úÖ PDF-—Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b><br><a href="'+url+'" target="_blank">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</a>';
              })
              .withFailureHandler(err => {
                document.getElementById('status').innerHTML =
                  '<b style="color:red;">‚ùå ' + (err.message || err) + '</b>';
              })
              .exportSheetRangeToPdfCustom(sheet, range, fileName + ".pdf");
          } else if (format === 'xlsx') {
            google.script.run
              .withSuccessHandler(url => {
                document.getElementById('status').innerHTML =
                  '<b>‚úÖ Excel-—Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b><br><a href="'+url+'" target="_blank">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</a>';
              })
              .withFailureHandler(err => {
                document.getElementById('status').innerHTML =
                  '<b style="color:red;">‚ùå ' + (err.message || err) + '</b>';
              })
              .exportSheetRangeToExcelCustom(sheet, range, fileName + ".xlsx");
          }
        }
      </script>
      <style>
        @keyframes progressmove {
          0% {background-position: 0% 50%;}
          100% {background-position: 100% 50%;}
        }
      </style>
    </div>
  `).setWidth(700).setHeight(420);
  SpreadsheetApp.getUi().showModalDialog(html, "–ï–∫—Å–ø–æ—Ä—Ç –¥–æ Word / PDF / Excel");
}

// === –≠–∫—Å–ø–æ—Ä—Ç –≤ Word ===
function exportSheetRangeToWordCustom(sheetName, rangeA1, wordFileName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
    const values = sheet.getRange(rangeA1).getValues();
    if (!values || !values.length) throw new Error("–î—ñ–∞–ø–∞–∑–æ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π!");

    const doc = DocumentApp.create(wordFileName.replace(/\.docx$/i, ''));
    doc.getBody().appendTable(values);
    doc.saveAndClose();

    const token = ScriptApp.getOAuthToken();
    const url = `https://docs.google.com/feeds/download/documents/export/Export?id=${doc.getId()}&exportFormat=docx`;
    const response = UrlFetchApp.fetch(url, { headers: { Authorization: 'Bearer ' + token } });
    const blob = response.getBlob().setName(wordFileName.endsWith('.docx') ? wordFileName : wordFileName + ".docx");
    const file = DriveApp.createFile(blob);

    return file.getUrl();
  } catch (e) {
    throw new Error(e && e.message ? e.message : e);
  }
}

function generatePdfReport(formData) {
  // –°–æ–∑–¥–∞—ë–º Google Doc
  const doc = DocumentApp.create('Word –∑–≤—ñ—Ç');
  const body = doc.getBody();

  // –®–∞–ø–∫–∞
  if (formData.header) {
    if (formData.header.boss) body.appendParagraph(`–ù–∞—á–∞–ª—å–Ω–∏–∫: ${formData.header.boss}`).setHeading(DocumentApp.ParagraphHeading.HEADING3);
    if (formData.header.date) body.appendParagraph(`–î–∞—Ç–∞: ${formData.header.date}`).setHeading(DocumentApp.ParagraphHeading.HEADING3);
    if (formData.header.order) body.appendParagraph(`–ù–∞–∫–∞–∑: ${formData.header.order}`).setHeading(DocumentApp.ParagraphHeading.HEADING3);
    body.appendParagraph('');
  }
  if (formData.title) body.appendParagraph(formData.title).setHeading(DocumentApp.ParagraphHeading.HEADING1);
  if (formData.description) body.appendParagraph(formData.description).setHeading(DocumentApp.ParagraphHeading.HEADING2);

  // –¢–∞–±–ª–∏—Ü—ã
  if (formData.tables && Array.isArray(formData.tables)) {
    formData.tables.forEach((t, idx) => {
      if (!t.sheet || !t.range) return;
      const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(t.sheet);
      if (!sheet) return;
      const values = sheet.getRange(t.range).getValues();
      body.appendParagraph(`–¢–∞–±–ª–∏—Ü—è ${idx+1}: ${t.sheet} ${t.range}`);
      body.appendTable(values);
      body.appendParagraph('');
    });
  }

  doc.saveAndClose();

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ PDF
  const file = DriveApp.getFileById(doc.getId());
  const pdfBlob = file.getAs('application/pdf').setName("WordReport.pdf");
  const exported = DriveApp.createFile(pdfBlob);

  // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Google Doc
  file.setTrashed(true);

  return exported.getUrl();
}

function generateExcelReport(formData) {
  const ss = SpreadsheetApp.create('ExcelReport');
  if (formData.tables && Array.isArray(formData.tables)) {
    formData.tables.forEach((t, idx) => {
      if (!t.sheet || !t.range) return;
      const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(t.sheet);
      if (!sheet) return;
      const values = sheet.getRange(t.range).getValues();
      let newSheet = idx === 0 ? ss.getSheets()[0] : ss.insertSheet();
      newSheet.setName(`${t.sheet}_${idx+1}`);
      newSheet.getRange(1,1,values.length,values[0].length).setValues(values);
    });
  }
  const file = DriveApp.getFileById(ss.getId());
  const blob = file.getBlob().setName("ExcelReport.xlsx");
  const exported = DriveApp.createFile(blob);
  file.setTrashed(true);
  return exported.getUrl();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ HTML-—Ñ–æ—Ä–º—ã (WordExportForm.html)
function showWordExportFullForm() {
  const html = HtmlService.createHtmlOutputFromFile('WordExportForm')
    .setWidth(1200).setHeight(1600);
  SpreadsheetApp.getUi().showModalDialog(html, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Word-–∑–≤—ñ—Ç—É");
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã
function getSheetNames() {
  return SpreadsheetApp.getActiveSpreadsheet().getSheets().map(s => s.getName());
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function getPreviewData(sheetName, rangeA1) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  if (!sheet) return [];
  return sheet.getRange(rangeA1).getValues();
}
