/**
 * –í—Å—ñ –∫–µ—à—ñ, —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ, –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ª–æ–≥–∏, —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –∞—Ä—Ö—ñ–≤–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ–π –ø–∞–ø—Ü—ñ Google Drive
 */

const SHEET_NAMES = [
  "2 –ë–∞—Ç –ó–∞–≥–∞–ª—å–Ω–∞", "–£–¥–∞—Ä–Ω—ñ –ë–ø–õ–ê", "–†–æ–∑–≤—ñ–¥—É–≤–∞–ª—å–Ω—ñ –ë–ø–õ–ê", "–ù–†–ö", "–ü–ü–û",
  "–ù–°–û –ë–¢", "–ê–¢", "–ó–∞—Å–æ–±–∏ —É—Ä–∞–∂–µ–Ω–Ω—è", "–ó–ë–ë —Ç–∞ –†", "–†–ï–ë", "–û–ø—Ç–∏–∫–∞", "–†–õ–°"
];
const LOG_SHEET_NAME = "–õ–æ–≥ –∑–º—ñ–Ω";
const COLOR_GREEN = "#b6d7a8";
const IMPORTANT_RANGES = {
  "2 –ë–∞—Ç –ó–∞–≥–∞–ª—å–Ω–∞": ["A1:C5"],
  "–ê–¢": ["B2:D6"]
};

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞–ø–∫—É –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ (–ª–æ–≥—ñ–≤, –∫–µ—à—É, –µ–∫—Å–ø–æ—Ä—Ç—ñ–≤, –∞—Ä—Ö—ñ–≤—ñ–≤)
 */
function getTmpFolderOrThrow() {
  try {
    return DriveApp.getFolderById(TMP_FOLDER_ID);
  } catch (e) {
    throw new Error("–ü–∞–ø–∫—É –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ TMP_FOLDER_ID.");
  }
}

function showLogsRestoreDialog() {
  const html = HtmlService.createHtmlOutputFromFile('logs_restore.html')
    .setWidth(1000).setHeight(700);
  SpreadsheetApp.getUi().showModalDialog(html, '–ê—Ä—Ö—ñ–≤–∏ –ª–æ–≥—ñ–≤');
}

// === –ú–µ–Ω—é –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Ñ–∞–π–ª—É ===
function onOpen() {
  const ui = SpreadsheetApp.getUi();

  // === 1. –ú–µ–Ω—é "üõ† –î—ñ—ó –∑ —Ç–∞–±–ª–∏—Ü–µ—é" ===
  const mainMenu = ui.createMenu("üõ† –î—ñ—ó –∑ —Ç–∞–±–ª–∏—Ü–µ—é")
    .addItem("üì± –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥–∏ –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏", "generateFullInfoQRCodesForSheet")
    .addItem("üîç –ì–Ω—É—á–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤", "generateKeysWithCustomColumns")
    .addItem("üì± –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥–∏ –∑–∞ –ü–æ—Å—Ç—ñ–π–Ω–∏–º ID", "generateQRCodesForSheet")
    .addItem("üìÅ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–ª—é—á–∞–º–∏ (CSV)", "exportProductsWithKeysToCSV");

  // === 2. –ú–µ–Ω—é "üìè –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è" ===
  const formattingMenu = ui.createMenu("üìè –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è")
    .addItem("üìê –í–∏—Ä—ñ–≤–Ω—è—Ç–∏ –≤–∏—Å–æ—Ç—É —Ä—è–¥–∫—ñ–≤", "showSidebar");

  // === 3. –ú–µ–Ω—é "üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–æ Word" ===
  const wordExportMenu = ui.createMenu("üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–æ Word")
    .addItem("üìë –°–∫–ª–∞—Å—Ç–∏ –∑–≤—ñ—Ç —É Word...", "showWordExportFullForm")
    .addItem("üìò –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–æ Word...", "showExportToWordDialog")
    .addItem("üìñ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–æ Word", "exportSheetRangeToWord");

  // === 4. –ú–µ–Ω—é "üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ª–æ–≥–∏" ===
  const validationMenu = ui.createMenu("üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ª–æ–≥–∏")
    .addItem("üîß –†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω", "checkChanges")
    .addItem("üìä –ó–≤—ñ—Ç –ø–æ –¥—ñ—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "showUsersActionReport")
    .addItem("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—é/—Ñ–æ—Ä–º–∞—Ç–∏", "runValidation");

  // === 5. –ú–µ–Ω—é "üì¶ –õ–æ–≥–∏ —Ç–∞ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—è" ===
  const logMenu = ui.createMenu("üì¶ –õ–æ–≥–∏ —Ç–∞ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—è")
    .addItem("üì• –ï–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—É —É Excel", "exportLogSheetAsExcel")
    .addItem("üì§ –ï–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—É —É CSV", "exportLogSheetAsCSV")
    .addItem("üìú –ï–∫—Å–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó —É CSV", "exportHistoryToCSV")
    .addItem("üóÉ –ê—Ä—Ö—ñ–≤–∞—Ü—ñ—è –ª–æ–≥—ñ–≤", "archiveLogHistory")
    .addItem("‚è∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–∏–≥–µ—Ä –Ω–∞ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—é", "createDailyArchiveTrigger")
    .addItem("üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –±–µ–∫–∞–ø–∏", "cleanupOldBackups");

  // === 6. –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–º–µ–Ω—é "üîç –ü–æ—à—É–∫ —ñ —ñ—Å—Ç–æ—Ä—ñ—è" ===
  const searchMenu = ui.createMenu("üîç –ü–æ—à—É–∫ —ñ —ñ—Å—Ç–æ—Ä—ñ—è")
    .addItem("üîé –î–æ–¥–∞—Ç–∏ –ø—É–Ω–∫—Ç '–ü–æ—à—É–∫' –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "addHistorySearchMenu");

  // === –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–µ–Ω—é –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ UI ===
  ui.createMenu("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    .addSubMenu(mainMenu)
    .addSubMenu(formattingMenu)
    .addSubMenu(wordExportMenu)
    .addSubMenu(validationMenu)
    .addSubMenu(logMenu)
    .addSubMenu(searchMenu)
    .addToUi();

  setupLogSheet();
}


// –í—ñ–¥–∫—Ä–∏–≤–∞—î –±–æ–∫–æ–≤—É –ø–∞–Ω–µ–ª—å
function showSidebar() {
  const html = HtmlService.createHtmlOutputFromFile("Sidebar").setTitle("–í–∏—Ä—ñ–≤–Ω—è—Ç–∏ —Å—Ç—Ä–æ–∫–∏");
  SpreadsheetApp.getUi().showSidebar(html);
}

function checkChanges() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const props = PropertiesService.getScriptProperties();
  SHEET_NAMES.forEach(sheetName => {
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    if (!Array.isArray(values)) return;

    const currentHash = JSON.stringify(values);
    const storedHashKey = `prevDataHash_${sheetName}`;
    const storedValuesKey = `prevValues_${sheetName}`;
    const storedHash = props.getProperty(storedHashKey);

    let oldValues = [];
    if (storedHash) {
      const old = props.getProperty(storedValuesKey);
      oldValues = old ? JSON.parse(old) : values.map(row => row.map(() => null));
    } else {
      oldValues = values.map(row => row.map(() => null));
    }

    if (
      storedHash &&
      storedHash !== currentHash &&
      Array.isArray(values) &&
      Array.isArray(oldValues) &&
      values.length > 0 &&
      oldValues.length > 0
    ) {
      highlightChanges(sheet, oldValues, values);
      logChanges(sheet, oldValues, values);
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤/—Å—Ç–æ–≤–ø—Ü—ñ–≤
    if (
      Array.isArray(oldValues) &&
      Array.isArray(values) &&
      oldValues.length !== values.length
    ) {
      const type = oldValues.length < values.length ? "–î–æ–¥–∞–Ω–æ —Ä—è–¥–æ–∫" : "–í–∏–¥–∞–ª–µ–Ω–æ —Ä—è–¥–æ–∫";
      logRowOrColumnAction(sheet, type, oldValues.length, values.length);
    }
    if (
      Array.isArray(oldValues) && Array.isArray(values) &&
      oldValues.length > 0 && values.length > 0 &&
      oldValues[0].length !== values[0].length
    ) {
      const type = oldValues[0].length < values[0].length ? "–î–æ–¥–∞–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å" : "–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å";
      logRowOrColumnAction(sheet, type, oldValues[0].length, values[0].length);
    }

    props.setProperty(storedHashKey, currentHash);
    props.setProperty(storedValuesKey, JSON.stringify(values));
  });
}

// === –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–µ–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤ —É TMP_FOLDER_ID ===

/**
 * –ï–∫—Å–ø–æ—Ä—Ç—É—î LOG_SHEET_NAME —É Excel/CSV —É TMP_FOLDER_ID
 * @param {string} format - "csv" –∞–±–æ "xlsx"
 * @returns {string} URL —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
 */
function backupLogSheetToTmpFolder(format = "xlsx") {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const logSheet = ss.getSheetByName(LOG_SHEET_NAME);
  if (!logSheet) throw new Error("–õ–∏—Å—Ç '–õ–æ–≥ –∑–º—ñ–Ω' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");

  const folder = getTmpFolderOrThrow();
  const data = logSheet.getDataRange().getValues();
  if (!data || data.length === 0) throw new Error("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!");

  const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyyMMdd_HHmmss");
  const fileName = `backup_log_${timestamp}`;
  let fileUrl = "";
  const fmt = format.toLowerCase();

  if (fmt === "csv") {
    let csv = '\uFEFF' + data.map(row => row.map(cell => `"${(cell ?? "").toString().replace(/"/g, '""')}"`).join(",")).join("\n");
    const blob = Utilities.newBlob(csv, MimeType.CSV, `${fileName}.csv`);
    const file = folder.createFile(blob);
    fileUrl = file.getUrl();
  } else if (fmt === "xlsx") {
    const tempSS = SpreadsheetApp.create(fileName);
    const tempSheet = tempSS.getSheets()[0];
    tempSheet.getRange(1, 1, data.length, data[0].length).setValues(data);

    tempSS.getSheets().forEach(s => {
      if (s.getName() !== tempSheet.getName()) tempSS.deleteSheet(s);
    });

    const blob = tempSS.getBlob().setContentType(MimeType.MICROSOFT_EXCEL);
    const file = folder.createFile(blob.setName(`${fileName}.xlsx`));
    Utilities.sleep(500);
    DriveApp.getFileById(tempSS.getId()).setTrashed(true);

    fileUrl = file.getUrl();
  } else {
    throw new Error("–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: " + format);
  }

  return fileUrl;
}

/**
 * –ê—Ä—Ö—ñ–≤—É—î –ª–æ–≥ —É —Ñ–∞–π–ª CSV —ñ –∑–±–µ—Ä—ñ–≥–∞—î —É TMP_FOLDER_ID, –æ—á–∏—â–∞—î –ª–æ–≥
 */
function archiveLogHistory() {
  const folder = getTmpFolderOrThrow();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const logSheet = ss.getSheetByName(LOG_SHEET_NAME);
  if (!logSheet) throw new Error("–õ–∏—Å—Ç '–õ–æ–≥ –∑–º—ñ–Ω' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");

  const data = logSheet.getDataRange().getValues();
  if (!data || data.length <= 1) return;

  const timestamp = Utilities.formatDate(new Date(), ss.getSpreadsheetTimeZone(), "yyyy-MM-dd_HH-mm-ss");
  let csv = '\uFEFF' + data.map(row =>
    row.map(cell => `"${(cell ?? "").toString().replace(/"/g, '""')}"`).join(",")
  ).join("\n");

  const blob = Utilities.newBlob(csv, MimeType.CSV, `log_archive_${timestamp}.csv`);
  folder.createFile(blob);

  if (logSheet.getLastRow() > 1) {
    logSheet.getRange(2, 1, logSheet.getLastRow()-1, logSheet.getLastColumn()).clearContent();
  }
  Logger.log(`–õ–æ–≥ –∑–∞ ${timestamp} –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ.`);
}

/**
 * –°—Ç–≤–æ—Ä—é—î —Ç—Ä–∏–≥–µ—Ä –Ω–∞ —â–æ–¥–µ–Ω–Ω—É –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—é –ª–æ–≥–∞
 */
function createDailyArchiveTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  const exists = triggers.some(t => t.getHandlerFunction() === "archiveLogHistory");
  if (!exists) {
    ScriptApp.newTrigger("archiveLogHistory")
      .timeBased()
      .atHour(23)
      .everyDays(1)
      .create();
    Logger.log("–¢—Ä–∏–≥–µ—Ä –Ω–∞ —â–æ–¥–µ–Ω–Ω—É –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ.");
  }
}

/**
 * –í–∏–¥–∞–ª—è—î –∞—Ä—Ö—ñ–≤–∏/—Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω—ñ–≤ –∑ TMP_FOLDER_ID
 */
function cleanupOldBackups(daysToKeep = 30) {
  const folder = getTmpFolderOrThrow();
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

  const files = folder.getFiles();
  let deleted = 0;
  while (files.hasNext()) {
    const file = files.next();
    if (file.getLastUpdated() < cutoffDate) {
      file.setTrashed(true);
      deleted++;
    }
  }
  Logger.log(`–°—Ç–∞—Ä—ñ –±–µ–∫–∞–ø–∏ (${deleted} —à—Ç.) –≤–∏–¥–∞–ª–µ–Ω—ñ.`);
}

/**
 * –í–∏–≤–æ–¥–∏—Ç—å –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –ª–æ–≥—É —É Excel
 */
function exportLogSheetAsExcel() {
  try {
    const url = backupLogSheetToTmpFolder("xlsx");
    if (isUiAvailable()) {
      SpreadsheetApp.getUi().alert("–§–∞–π–ª Excel —Å—Ç–≤–æ—Ä–µ–Ω–æ", `–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: ${url}`, SpreadsheetApp.getUi().ButtonSet.OK);
    } else {
      Logger.log("–§–∞–π–ª Excel —Å—Ç–≤–æ—Ä–µ–Ω–æ: " + url);
    }
  } catch (e) {
    if (isUiAvailable()) {
      SpreadsheetApp.getUi().alert("–ü–æ–º–∏–ª–∫–∞", e.message, SpreadsheetApp.getUi().ButtonSet.OK);
    } else {
      Logger.log("–ü–æ–º–∏–ª–∫–∞: " + e.message);
    }
  }
}

/**
 * –í–∏–≤–æ–¥–∏—Ç—å –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –ª–æ–≥—É —É CSV
 */
function exportLogSheetAsCSV() {
  try {
    const url = backupLogSheetToTmpFolder("csv");
    if (isUiAvailable()) {
      SpreadsheetApp.getUi().alert("–§–∞–π–ª CSV —Å—Ç–≤–æ—Ä–µ–Ω–æ", `–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: ${url}`, SpreadsheetApp.getUi().ButtonSet.OK);
    } else {
      Logger.log("–§–∞–π–ª CSV —Å—Ç–≤–æ—Ä–µ–Ω–æ: " + url);
    }
  } catch (e) {
    if (isUiAvailable()) {
      SpreadsheetApp.getUi().alert("–ü–æ–º–∏–ª–∫–∞", e.message, SpreadsheetApp.getUi().ButtonSet.OK);
    } else {
      Logger.log("–ü–æ–º–∏–ª–∫–∞: " + e.message);
    }
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π SpreadsheetApp.getUi()
 */
function isUiAvailable() {
  try {
    SpreadsheetApp.getUi();
    return true;
  } catch {
    return false;
  }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ª–æ–≥/–∞—Ä—Ö—ñ–≤ —Ñ–∞–π–ª—ñ–≤ —É TMP_FOLDER_ID (csv/xlsx)
 */
function getLogFilesList() {
  const folder = getTmpFolderOrThrow();
  const files = folder.getFiles();
  let list = [];
  while (files.hasNext()) {
    const file = files.next();
    const name = file.getName();
    if (!/\.csv$|\.xlsx$/i.test(name)) continue;
    list.push({
      id: file.getId(),
      name: name,
      date: file.getLastUpdated()
    });
  }
  list.sort((a, b) => b.date - a.date);
  return list;
}


// === –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤/—Å—Ç–æ–≤–ø—Ü—ñ–≤ ===
function logRowOrColumnAction(sheet, type, oldLen, newLen) {
    const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(LOG_SHEET_NAME);
    const user = Session.getActiveUser().getEmail();
    const time = new Date();
    let actionDesc = "";
    let sheetName = (sheet && typeof sheet.getName === "function") ? sheet.getName() : "[–Ω–µ–≤—ñ–¥–æ–º–∏–π –ª–∏—Å—Ç]";
  
    if (type === "–î–æ–¥–∞–Ω–æ —Ä—è–¥–æ–∫") {
      actionDesc = `–ë—É–ª–æ ${oldLen}, —Å—Ç–∞–ª–æ ${newLen}`;
    } else if (type === "–í–∏–¥–∞–ª–µ–Ω–æ —Ä—è–¥–æ–∫") {
      actionDesc = `–ë—É–ª–æ ${oldLen}, —Å—Ç–∞–ª–æ ${newLen}`;
    } else if (type === "–î–æ–¥–∞–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å") {
      actionDesc = `–ë—É–ª–æ ${oldLen}, —Å—Ç–∞–ª–æ ${newLen}`;
    } else if (type === "–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å") {
      actionDesc = `–ë—É–ª–æ ${oldLen}, —Å—Ç–∞–ª–æ ${newLen}`;
    } else {
      actionDesc = `–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–º—ñ–Ω–∏: ${type}`;
    }
    logSheet.appendRow([
      time,
      user,
      sheetName,
      "",
      type,
      actionDesc,
      "",
      "",
      ""
    ]);
  }


  // === –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∑–Ω–∞—á–µ–Ω—å –∑ —Ç–∏–ø–æ–º –¥—ñ—ó ===
function logChanges(sheet, oldValues, newValues) {
    if (!sheet || !Array.isArray(newValues) || !Array.isArray(oldValues)) return;
    const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(LOG_SHEET_NAME);
    const user = Session.getActiveUser().getEmail();
    const time = new Date();
    let changes = [];
    for (let row = 0; row < newValues.length; row++) {
      const newRow = newValues[row] || [];
      const oldRow = oldValues[row] || [];
      for (let col = 0; col < newRow.length; col++) {
        const oldValue = (oldRow[col] !== undefined ? oldRow[col] : "");
        const newValue = (newRow[col] !== undefined ? newRow[col] : "");
        if (oldValue !== newValue) {
          const cell = sheet.getRange(row + 1, col + 1);
          let formula = cell.getFormula();
          if (formula) formula = "=" + formula;
          const important = isImportantCell(sheet.getName(), row + 1, col + 1) ? "–¢–∞–∫" : "–ù—ñ";
          // –¢–∏–ø –¥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ—ó –∑–º—ñ–Ω–∏:
          let changeType = "";
          if ((oldValue === "" || oldValue === null) && newValue !== "") {
            changeType = "–î–æ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è";
          } else if (oldValue !== "" && (newValue === "" || newValue === null)) {
            changeType = "–í–∏–¥–∞–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è";
          } else {
            changeType = "–ó–º—ñ–Ω–µ–Ω–æ";
          }
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º link –Ω–∞ —è—á–µ–π–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          const cellLink = `=HYPERLINK("#gid=${sheet.getSheetId()}&range=${cell.getA1Notation()}"; "${cell.getA1Notation()}")`;
          changes.push([
            time,
            user,
            sheet.getName(),
            cellLink, // –°—Å—ã–ª–∫–∞ –Ω–∞ —è—á–µ–π–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ HYPERLINK
            changeType,
            oldValue,
            newValue,
            formula || "",
            important
          ]);
        }
      }
    }
    if (changes.length > 0) {
      logSheet.getRange(logSheet.getLastRow() + 1, 1, changes.length, 9).setValues(changes);
    }
  }

  
  // === –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –∑–º—ñ–Ω–µ–Ω–∏—Ö –∫–æ–º—ñ—Ä–æ–∫ ===
function highlightChanges(sheet, oldValues, newValues) {
    if (!Array.isArray(newValues) || !Array.isArray(oldValues)) return;
    for (let row = 0; row < newValues.length; row++) {
      for (let col = 0; col < newValues[row].length; col++) {
        const oldValue = (oldValues[row] || [])[col];
        const newValue = newValues[row][col];
        if (oldValue !== newValue) {
          const cell = sheet.getRange(row + 1, col + 1);
          // –î–æ–¥–∞—î–º–æ –∫–æ–ª—å–æ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–∏–ø—É –∑–º—ñ–Ω–∏
          if ((oldValue === "" || oldValue === null) && newValue !== "") {
            // –ë—É–ª–æ –ø—É—Å—Ç–æ -> —Å—Ç–∞–ª–æ —â–æ—Å—å (–¥–æ–¥–∞–≤–∞–Ω–Ω—è)
            cell.setBackground("#b6d7a8"); // –ó–µ–ª–µ–Ω–∏–π
          } else if (oldValue !== "" && (newValue === "" || newValue === null)) {
            // –ë—É–ª–æ —â–æ—Å—å -> —Å—Ç–∞–ª–æ –ø—É—Å—Ç–æ (–≤–∏–¥–∞–ª–µ–Ω–Ω—è)
            cell.setBackground("#ea9999"); // –ß–µ—Ä–≤–æ–Ω–∏–π
          } else {
            // –ë—É–¥—å-—è–∫–∞ —ñ–Ω—à–∞ –∑–º—ñ–Ω–∞ (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
            cell.setBackground("#ffe599"); // –ñ–æ–≤—Ç–∏–π
          }
        }
      }
    }
  }




  // === –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–∏—Ö –∫–æ–º—ñ—Ä–æ–∫ ===
function isImportantCell(sheetName, row, col) {
    if (!IMPORTANT_RANGES[sheetName]) return false;
    for (const rangeStr of IMPORTANT_RANGES[sheetName]) {
      const range = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName).getRange(rangeStr);
      if (
        row >= range.getRow() &&
        row < range.getRow() + range.getNumRows() &&
        col >= range.getColumn() &&
        col < range.getColumn() + range.getNumColumns()
      ) {
        return true;
      }
    }
    return false;
  }


  // === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞ –¥–ª—è –ª–æ–≥—ñ–≤ ===
function setupLogSheet() {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let logSheet = ss.getSheetByName(LOG_SHEET_NAME);
    if (!logSheet) {
      logSheet = ss.insertSheet(LOG_SHEET_NAME);
      const headers = [[
        "–ß–∞—Å –∑–º—ñ–Ω–∏",
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        "–ê—Ä–∫—É—à",
        "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–º—ñ—Ä–∫—É", // –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Å—ã–ª–∫–∏
        "–¢–∏–ø –¥—ñ—ó",
        "–ë—É–ª–æ",
        "–°—Ç–∞–ª–æ",
        "–§–æ—Ä–º—É–ª–∞",
        "–í–∞–∂–ª–∏–≤–∞ –∑–º—ñ–Ω–∞"
      ]];
      logSheet.getRange(1, 1, 1, headers[0].length).setValues(headers);
      logSheet.autoResizeColumns(1, headers[0].length);
    }
  }

  function getAllHistoryLogs() {
    const logs = google.script.run.withSuccessHandler(function(logs){
      if (!logs || !logs.length) {
        showStatus('–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É', 'error');
        return [];
      }
      return logs;
    }).getAllHistoryLogs();
  }
  
  function exportHistoryToCSV() {
    const logs = getAllHistoryLogs();
    if (!logs.length) {
      showStatus('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!', 'error');
      return;
    }
  
    const headers = ['–î–∞—Ç–∞/—á–∞—Å', '–ê—Ä–∫—É—à', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', '–î—ñ—è', '–ê–¥—Ä–µ—Å–∞', '–ë—É–ª–æ', '–°—Ç–∞–ª–æ'];
    const rows = [headers].concat(
      logs.map(r => [
        r.dateTime || r.date, r.sheet, r.user, r.action, r.address, r.oldValue, r.newValue
      ])
    );
    const csv = rows.map(row => row.map(cell =>
      `"${(cell||'').toString().replace(/"/g,'""')}"`
    ).join(',')).join('\r\n');
  
    const blob = new Blob([csv], {type:'text/csv'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'history_search_export.csv';
    document.body.appendChild(a);
    a.click();
    setTimeout(()=>{URL.revokeObjectURL(url);a.remove();},600);
    showStatus('CSV-—Ñ–∞–π–ª —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ.', 'success');
  }
  
  function getHistoryAnalytics() {
    const logs = getAllHistoryLogs();
    const users = {};
    const sheets = {};
    const days = {};
    logs.forEach(log => {
      if (log.user) users[log.user] = (users[log.user] || 0) + 1;
      if (log.sheet) sheets[log.sheet] = (sheets[log.sheet] || 0) + 1;
      if (log.date) days[log.date] = (days[log.date] || 0) + 1;
    });
    return { users, sheets, days };
  }
